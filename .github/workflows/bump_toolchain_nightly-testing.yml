name: Bump lean-toolchain on nightly-testing

on:
  schedule:
    - cron: '0 10/3 * * *'
    # Run every three hours, starting at 11AM CET/2AM PT.
    # This should be 3 hours after lean4 starts building its nightly.
  workflow_dispatch:

jobs:
  update-toolchain:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        ref: nightly-testing # checkout nightly-testing branch
        token: ${{ secrets.NIGHTLY_TESTING }}

    - name: Get latest release tag from leanprover/lean4-nightly
      id: get-latest-release
      run: |
        RELEASE_TAG="$(curl -s "https://api.github.com/repos/leanprover/lean4-nightly/releases" | jq -r '.[0].tag_name')"
        echo "RELEASE_TAG=$RELEASE_TAG" >> "${GITHUB_ENV}"

    - name: Check if nightly-testing tag exists in mathlib4-nightly-testing
      id: check-nightly-testing
      run: |
        # Extract date from RELEASE_TAG (format: nightly-YYYY-MM-DD)
        DATE_PART=$(echo "$RELEASE_TAG" | sed 's/nightly-//')
        NIGHTLY_TESTING_TAG="nightly-testing-${DATE_PART}"
        echo "NIGHTLY_TESTING_TAG=$NIGHTLY_TESTING_TAG" >> "${GITHUB_ENV}"

        # Check if the tag exists in leanprover-community/mathlib4-nightly-testing
        if curl -s -f "https://api.github.com/repos/leanprover-community/mathlib4-nightly-testing/git/ref/tags/${NIGHTLY_TESTING_TAG}" > /dev/null; then
          echo "Tag ${NIGHTLY_TESTING_TAG} exists in mathlib4-nightly-testing"
          echo "tag_exists=true" >> "${GITHUB_OUTPUT}"
        else
          echo "Tag ${NIGHTLY_TESTING_TAG} does not exist in mathlib4-nightly-testing"
          echo "tag_exists=false" >> "${GITHUB_OUTPUT}"
        fi

    - name: Configure Lean
      uses: leanprover/lean-action@f807b338d95de7813c5c50d018f1c23c9b93b4ec # 2025-04-24
      with:
        auto-config: false
        use-github-cache: false
        use-mathlib-cache: false

    - name: Update toolchain and dependencies
      if: steps.check-nightly-testing.outputs.tag_exists == 'true'
      run: |
        # Update lean-toolchain file
        echo "leanprover/lean4:${RELEASE_TAG}" > lean-toolchain

        # Update lakefile.toml using Python with proper TOML parsing
        python3 << 'PYEOF'
import sys
try:
    import tomllib
except ImportError:
    import tomli as tomllib
import os

# Read the current lakefile.toml
with open("lakefile.toml", "rb") as f:
    data = tomllib.load(f)

# Find and update the mathlib require block
nightly_testing_tag = os.environ["NIGHTLY_TESTING_TAG"]
mathlib_git_url = "https://github.com/leanprover-community/mathlib4-nightly-testing"

updated = False
if "require" in data:
    for req in data["require"]:
        # Check if this is the mathlib dependency (either name-based or git-based)
        is_mathlib = (req.get("name") == "mathlib" or
                     req.get("git") == mathlib_git_url)

        if is_mathlib:
            # Remove name and scope if present (converting from name-based to git-based)
            req.pop("name", None)
            req.pop("scope", None)

            # Set git URL and update rev
            req["git"] = mathlib_git_url
            req["rev"] = nightly_testing_tag
            updated = True
            break

if not updated:
    print("Error: Could not find mathlib dependency in lakefile.toml", file=sys.stderr)
    sys.exit(1)

# Write back to lakefile.toml (manual TOML writing to preserve format)
with open("lakefile.toml", "w") as f:
    # Write top-level fields
    for key in ["name", "version", "defaultTargets", "testDriver"]:
        if key in data:
            if isinstance(data[key], str):
                f.write(f'{key} = "{data[key]}"\n')
            elif isinstance(data[key], list):
                f.write(f'{key} = {data[key]}\n')

    # Write leanOptions section
    if "leanOptions" in data:
        f.write("\n[leanOptions]\n")
        for key, val in data["leanOptions"].items():
            if isinstance(val, bool):
                f.write(f'{key} = {str(val).lower()}\n')
            else:
                f.write(f'{key} = "{val}"\n')

    # Write require sections
    for req in data.get("require", []):
        f.write("\n[[require]]\n")
        for key, val in req.items():
            f.write(f'{key} = "{val}"\n')

    # Write lean_lib sections
    for lib in data.get("lean_lib", []):
        f.write("\n[[lean_lib]]\n")
        for key, val in lib.items():
            if isinstance(val, str):
                f.write(f'{key} = "{val}"\n')
            elif isinstance(val, list):
                if len(val) == 1:
                    f.write(f'{key} = "{val[0]}"\n')

print("Successfully updated lakefile.toml")
PYEOF

        # Update dependencies
        lake update

    - name: Commit and push changes
      if: steps.check-nightly-testing.outputs.tag_exists == 'true'
      run: |
        # For now we reuse a bot managed by Mathlib,
        # but it is fine to update this if Cslib wants to create its own bot accounts.
        git config user.name "leanprover-community-mathlib4-bot"
        git config user.email "leanprover-community-mathlib4-bot@users.noreply.github.com"
        git add lean-toolchain lakefile.toml lake-manifest.json
        # Don't fail if there's nothing to commit
        git commit -m "chore: bump to ${RELEASE_TAG} with mathlib at ${NIGHTLY_TESTING_TAG}" || true
        git push origin nightly-testing
