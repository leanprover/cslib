
var s : Student;
var h : Hospital;
var hospital   : [Student] Hospital;
var student    : [Hospital] Student;
var count      : [Student] int;
var preference : [Student, int] Hospital;
var ranking    : [Hospital, Student] int;

var n : int;
const UNMATCHED : int = 0;

// Initialize matching arrays to UNMATCHED
for (s : Student) {
  hospital[s] := UNMATCHED;
}

for (h : Hospital) {
  student[h] := UNMATCHED;
}

// Initialize proposal counts to 0
for (s : Student) {
  count[s] := 0;
}


// Main Gale-Shapley algorithm

while (∃ s : Student : hospital[s] = UNMATCHED ∧ count[s] < n) {

  // Pick an unmatched student that hasn't proposed to every hospital
  havoc s;
  assume hospital[s] = UNMATCHED;
  assume count[s] < n;
  
  // s proposes to the next hospital on its preference list
  count[s] := count[s] + 1;
  h := preference[s, count[s]];
  
  if (student[h] = UNMATCHED) then {
    // h is unmatched, so match s and h
    hospital[s] := h;
    student[h] := s;
    
  } else {
    // h is already matched to some student K
    var k : Student;
    k := student[h];
    
    // Check if h prefers s to k
    if (ranking[h, s] < ranking[h, k]) then {
      // h prefers s to k, so update matching
      hospital[s] := h;
      student[h] := s;
      hospital[k] := UNMATCHED;
      
    } else {
      // h rejects s (no action needed)
    }
  }
}